:py:mod:`permpy.permset`
========================

.. py:module:: permpy.permset


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   permpy.permset.PermSet



Functions
~~~~~~~~~

.. autoapisummary::

   permpy.permset.unpop
   permpy.permset.unpush



Attributes
~~~~~~~~~~

.. autoapisummary::

   permpy.permset.mpl_imported


.. py:data:: mpl_imported
   :annotation: = True

   

.. py:class:: PermSet(cls, s=[])

   Bases: :py:obj:`set`, :py:obj:`permpy.deprecated.permsetdeprecated.PermSetDeprecatedMixin`

   Represents a set of permutations, and allows statistics to be computed
   across the set.

   .. py:method:: __repr__(self)

      Return repr(self).


   .. py:method:: __add__(self, other)

      Return the union of the two permutation sets.

      .. rubric:: Examples

      >>> S = PermSet.all(3) + PermSet.all(4)
      >>> S
      Set of 30 permutations


   .. py:method:: __or__(self, other)

      Wrapper for _add__.


   .. py:method:: __sub__(self, other)

      Return the union of the two permutation sets.

      .. rubric:: Examples

      >>> S = PermSet.all(3) - PermSet(Permutation(123))
      >>> len(S)
      5


   .. py:method:: all(cls, length)
      :classmethod:

      Return the set of all permutations of a given length.

      :param length: the length of the permutations
      :type length: int

      .. rubric:: Examples

      >>> p = Permutation(12); q = Permutation(21)
      >>> PermSet.all(2) == PermSet([p, q])
      True


   .. py:method:: union(self, other)

      Wrapper for __add__


   .. py:method:: get_random(self)

      Return a random element from the set.

      .. rubric:: Examples

      >>> p = PermSet.all(4).get_random()
      >>> p in PermSet.all(4) and len(p) == 4
      True


   .. py:method:: by_length(self)

      Return a dictionary stratifying the permutations in `self`.


   .. py:method:: get_length(self, length)

      Return the subset of permutations that have the specified length.

      :param length: length of permutations to be returned
      :type length: int

      .. rubric:: Examples

      >>> S = PermSet.all(4) + PermSet.all(3)
      >>> S.get_length(3) == PermSet.all(3)
      True


   .. py:method:: show_all(self)

      The default representation doesn't print the entire set, this function does.


   .. py:method:: minimal_elements(self)

      Return the elements of `self` that are minimal with respect to the
      permutation pattern order.


   .. py:method:: symmetries(self)

      Return the PermSet of all symmetries of all permutations in `self`.


   .. py:method:: covers(self)

      Return those permutations that `self` covers.


   .. py:method:: covered_by(self)

      Return those permutations that `self` is covered by.


   .. py:method:: right_extensions(self, basis=None, test=None, trust=False)

      Return the 'one layer' upset of `self`.

      .. rubric:: Notes

      Requires each permutation in `self` to be the same size.
      Requires either basis or test.
      Implicit assumption is that the test is hereditary.

      :param basis (iter: optional): permutations to avoid. Useful for building classes.
      :param test: Function that accepts a permutation and returns a boolean.
                   Only returns those permutations that pass the test.
      :type test: optional
      :param trust (boolean: optional): Whether or not to trust the `insertion_values`
                             existing in the Permutations in `self`.


   .. py:method:: upset(self, up_to_length)

      Return the upset of `self`, stratified by length.

      :param basis (iter: optional): permutations to avoid. Useful for building classes.


   .. py:method:: downset(self)

      Return the downset of `self` as a list.


   .. py:method:: pattern_counts(self, k)

      Return a dictionary counting the copies of all `k`-perms in each permutation in `self`.


   .. py:method:: total_statistic(self, statistic, default=0)

      Return the sum of the given statistic over all perms in `self`.

      .. rubric:: Notes

      Works as long as the statistic is a number. If the statistic is a
          Counter or something, this will fail as written.


   .. py:method:: heatmap(self, only_length=None, ax=None, blur=False, gray=False, **kwargs)

      Visalization of a set of permutations, which, for each length, shows
      the relative frequency of each value in each position.

      :param only_length (int: optional):  If given, restrict to the permutations of this length.


   .. py:method:: stack_inverse(self)

      Return the PermSet of stack-inverses of elements of self.

      .. rubric:: Notes

      Uses dynamic programming!



.. py:function:: unpop(state)

   Given the before, stack, and after tuples, returns the (one-step) preimage.


.. py:function:: unpush(state)

   Given the before, stack, and after tuples, returns the (one-step) preimage.


