:py:mod:`permpy.PegPermutations.pegpermutation`
===============================================

.. py:module:: permpy.PegPermutations.pegpermutation


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   permpy.PegPermutations.pegpermutation.PegPermutation



Functions
~~~~~~~~~

.. autoapisummary::

   permpy.PegPermutations.pegpermutation.powerset



.. py:function:: powerset(iterable)


.. py:class:: PegPermutation(p, signs)

   Bases: :py:obj:`permpy.permutation.Permutation`

   Class for representing permutations as immutable 0-indexed tuples.

   .. py:attribute:: allowable_signs
      

      

   .. py:method:: __repr__(self)

      Return a string representation of the permutation depending on the
      chosen representation (`Permutation._REPR`).



   .. py:method:: __hash__(self)

      Return hash(self).


   .. py:method:: __eq__(self, other)

      Return self==value.


   .. py:method:: num_signs(self)


   .. py:method:: sign_subset(self, P)


   .. py:method:: filling_vector(self)


   .. py:method:: all_dotted_monotone_intervals(self)


   .. py:method:: is_compact(self)


   .. py:method:: is_compact_and_clean(self)


   .. py:method:: clean_basis(self)


   .. py:method:: split(self, indices)


   .. py:method:: clean(self)


   .. py:method:: downset(self)

      Return the downset D of `self` stratified by length.


   .. py:method:: shrink_by_one(self)

      Return all patterns contained in self of length one less than the permutation.


   .. py:method:: csgf(self, basis)


   .. py:method:: reverse(self)

      Return the reverse of the permutation.

      .. rubric:: Examples

      >>> Permutation(2314).reverse() == Permutation(4132)
      True


   .. py:method:: involved_in(self, P)

      Check if `self` is contained as a pattern in `P`.

      :param P: Pattern to be contained.
      :type P: Permutation-like object
      :param lr: Require the last entry to be equal to this.
      :type lr: int, optional

      .. rubric:: Examples

      >>> Permutation(123).involved_in(31542)
      False
      >>> Permutation(213).involved_in(54213)
      True


   .. py:method:: involvement_check(self, upper_bound, lower_bound, indices, q, next)


   .. py:method:: involvement_fits(self, upper_bound, lower_bound, indices, q, next)



